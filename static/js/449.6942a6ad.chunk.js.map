{"version":3,"file":"static/js/449.6942a6ad.chunk.js","mappings":"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","sources":["components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Popup/Popup.jsx","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","services/api/PlantAssignment/createMFGCA.js","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle Template\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Current\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: \"N/A\",\r\n          \"Change Status\": \"N/A\",\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"Buy\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              setAddPlantPopup(true);\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import * as XLSX from \"xlsx\";\r\nimport { getAllPlants } from \"./allPlantSevice\";\r\nimport { fetchCsrfToken } from \"./fetchCsrfService\";\r\nimport axios from \"axios\";\r\n\r\n// Import useToastWithProgress\r\n\r\n// const { showSuccessToastWithProgress, showErrorToastWithProgress } = useToastWithProgress();\r\n\r\n\r\nconst fetchData = async (\r\n  url,\r\n  body = null,\r\n  method = \"GET\"\r\n  // headers = {}\r\n) => {\r\n  console.log(\"Fetching URL:\", url);\r\n  console.log(\"Method is:\");\r\n  console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n  try {\r\n    const response = await axios({\r\n      url,\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: body, // Include body only if provided\r\n    });\r\n\r\n    console.log(\"Response received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Request failed:\", error);\r\n    throw error; // Propagate the error to the caller\r\n  }\r\n};\r\n// Function to create the manufacturing CA body from Excel data and allPlants\r\nexport const createManufacturingCABody = async (\r\n  excelData,\r\n  allPlantsData,\r\n  companyName,\r\n  collabSpace\r\n) => {\r\n  const items = [];\r\n  const uniquePlantTitles = new Set();\r\n\r\n  for (let i = 1; i < excelData.length; i++) {\r\n    const row = excelData[i];\r\n    if (row.length >= 2 && row[0] && row[1]) {\r\n      const itemName = row[0].toString().trim();\r\n      const plantsList = row[1].toString().includes(\",\")\r\n        ? row[1]\r\n            .toString()\r\n            .split(\",\")\r\n            .map((p) => p.trim())\r\n        : [row[1].toString().trim()];\r\n      items.push({\r\n        name: itemName,\r\n        plants: plantsList,\r\n      });\r\n      plantsList.forEach((plant) => uniquePlantTitles.add(plant));\r\n    }\r\n  }\r\n\r\n  const parentPlants = [];\r\n  uniquePlantTitles.forEach((plantTitle) => {\r\n    const matchedPlant = allPlantsData.find((plant) => {\r\n      const normalizedTitle = plant.title.replace(/^Plant\\s+/, \"\");\r\n      return normalizedTitle === plantTitle || plant.title === plantTitle;\r\n    });\r\n    if (matchedPlant) {\r\n      parentPlants.push({\r\n        PlantName: matchedPlant.title.replace(/^Plant\\s+/, \"\"),\r\n        PlantID: matchedPlant.id,\r\n      });\r\n    }\r\n  });\r\n\r\n  return {\r\n    CATitle: \"FromAutomation\",\r\n    CAOrganization: companyName, // company name credentials\r\n    CACollabSpace: collabSpace, // from credentials\r\n    CAOwner: \"e1331143\", \r\n    Items: items,\r\n    ParentPlants: parentPlants,\r\n  };\r\n};\r\n\r\n// Function to make the API call\r\nexport const callManufacturingCAApi = async (body) => {\r\n  const manufacturingCAUrl =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/createMFGCA\";\r\n\r\n // console.log(\"Headers for Manufacturing CA API:\", CAHeaders);\r\n\r\n  const response = await fetchData(\r\n    manufacturingCAUrl,\r\n    body,\r\n    \"POST\"\r\n  );\r\n  console.log(\"Manufacturing CA Response:\", JSON.stringify(response));\r\n  return response;\r\n};\r\n\r\n// Function to handle file change (only validation)\r\nexport const handleFileChange = async (\r\n  event,\r\n  setValidationErrors,\r\n  setShowErrorsModal,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n  setValidatedData, // New parameter to store validated data\r\n  setSelectedFiles,\r\n  setIsCreateButtonDisabled\r\n) => {\r\n  \r\n  console.log(\"[handleFileChange] Function triggered\");\r\n\r\n  const files = event.target.files;\r\n  const validExtensions = [\r\n    \"application/vnd.ms-excel\",\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  ]; // MIME types for .xls and .xlsx\r\n\r\n  // Check if all files are valid Excel files\r\n  const invalidFiles = Array.from(files).filter(\r\n    (file) =>\r\n      !validExtensions.includes(file.type) &&\r\n      !file.name.toLowerCase().endsWith(\".xls\") &&\r\n      !file.name.toLowerCase().endsWith(\".xlsx\")\r\n  );\r\n\r\n  if (invalidFiles.length > 0) {\r\n    showErrorToast(\"Only Excel files (.xls, .xlsx) can be uploaded\");\r\n    event.target.value = \"\"; // Reset the file input\r\n    setIsCreateButtonDisabled(true); // Disable the button if invalid files are present\r\n    return;\r\n  }\r\n\r\n  const file = files[0];\r\n  const reader = new FileReader();\r\n\r\n  reader.onload = async (e) => {\r\n    const data = new Uint8Array(e.target.result);\r\n    const workbook = XLSX.read(data, { type: \"array\" });\r\n    const sheetName = workbook.SheetNames[0];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Get data as a 2D array\r\n\r\n    console.log(\"Parsed Excel Data:\", jsonData);\r\n\r\n    // Validation: Check if the file is empty\r\n    if (jsonData.length === 0) {\r\n      showErrorToast(\"File is empty\");\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n\r\n    \r\n\r\n    // Validation: Check if headers match \"Item\" and \"Plants\"\r\n    const normalizedHeaders = jsonData[0].map((header) =>\r\n      header?.toString().trim().toLowerCase()\r\n    ); // Normalize headers\r\n    console.log(\"Normalized Headers:\", normalizedHeaders);\r\n\r\n    if (normalizedHeaders[0] !== \"item\" || normalizedHeaders[1] !== \"plants\") {\r\n      showErrorToast(\r\n        \"File headers are incorrect. Expected headers: 'Item' and 'Plants'\"\r\n      );\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n\r\n    // Validation: Check if the file contains only headers and no data\r\n    if (jsonData.length === 1) {\r\n      showErrorToast(\"No data present in the file. Only headers are present.\");\r\n      return;\r\n    }\r\n\r\n    const errors = [];\r\n    for (let i = 1; i < jsonData.length; i++) {\r\n      const row = jsonData[i];\r\n      const item = row[0];\r\n      const plants = row[1];\r\n\r\n      if (!item && plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Item\",\r\n          errorDescription: \"Items can't be empty\",\r\n        });\r\n      }\r\n\r\n      if (item && !plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Plants\",\r\n          errorDescription: \"Plants value is missing\",\r\n        });\r\n      }\r\n    }\r\n\r\n    console.log(\"Validation Errors:\", errors);\r\n\r\n    if (errors.length > 0) {\r\n      const formattedErrors = errors.map(\r\n        (error) =>\r\n          `Row ${error.rowNumber}: \"${error.columnName}\" value ${error.errorDescription}`\r\n      );\r\n\r\n      console.log(\"[createMFGCA.js] Formatted Errors:\", formattedErrors);\r\n\r\n      setValidationErrors(formattedErrors);\r\n      setShowErrorsModal(true);\r\n      setIsCreateButtonDisabled(true);\r\n    } else {\r\n      showSuccessToast(\"File uploaded successfully with no errors\");\r\n      setValidatedData(jsonData); // Store validated data for further processing\r\n      setSelectedFiles(file);// Update selectedFiles state only after successful validation\r\n      setIsCreateButtonDisabled(false);\r\n    }\r\n  };\r\n\r\n  reader.onerror = () => {\r\n    showErrorToast(\"Failed to read the file. Please try again.\");\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  reader.readAsArrayBuffer(file);\r\n};\r\n\r\n// New function to process Manufacturing CA\r\nexport const processManufacturingCA = async (\r\n  validatedData,\r\n  showSuccessToastWithProgress,\r\n  showErrorToastWithProgress\r\n) => {\r\n  try {\r\n\r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    let credentials = window.widget.getValue(\"Credentials\");\r\n    console.log(\"credentials createMFGCA\", credentials);\r\n    const credentialsParts = credentials.split(\".\");\r\n    console.log(\"credentialsParts\", credentialsParts);\r\n    const companyName = credentialsParts[1]; // Value after the first dot\r\n    console.log(\"Company Name:\", companyName);\r\n    const collabSpace = credentialsParts[2]; // Value after the second dot\r\n\r\n    console.log(\"Collab Space:\", collabSpace);\r\n\r\n    const allPlantsData = await getAllPlants([collabSpace], CAHeaders, \"\");\r\n    console.log(\"Fetched allPlantsData:\", allPlantsData);\r\n\r\n    const manufacturingCABody = await createManufacturingCABody(\r\n      validatedData,\r\n      allPlantsData,\r\n      companyName,\r\n      collabSpace\r\n    );\r\n    console.log(\r\n      \"[processManufacturingCA] Manufacturing CA Body (JSON):\",\r\n      JSON.stringify(manufacturingCABody, null, 2)\r\n    );\r\n\r\n    // Pass headers to callManufacturingCAApi\r\n    const response = await callManufacturingCAApi(\r\n      manufacturingCABody\r\n    );\r\n    console.log(\"[processManufacturingCA] Manufacturing CA API Response:\", response);\r\n\r\n    // Extract CAName from the response\r\n    const CAName = response?.CAName ;\r\n    showSuccessToastWithProgress(`Manufacturing CA created successfully! Name: ${CAName}`);\r\n    \r\n    // showSuccessToast(\"Manufacturing CA created successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error in processManufacturingCA:\", error);\r\n    showErrorToastWithProgress(\"Failed to create Manufacturing CA. Please try again.\");\r\n  }\r\n};","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport usePlantAssignment from \"../../hooks/usePlantAssignment\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { handleAddData, handleRemoveData, saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  \r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const { handlePlantAssignment } = usePlantAssignment(); // ✅ use the hook to get it\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange = (event) => {\r\n    handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n    setIsFileInputDisabled(true);\r\n   // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n     \r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n     \r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n     \r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n        \r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n          const droppedItems = droppedObjectData.initialDraggedData?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handlePlantAssignment); // ✅ Silent refresh\r\n          }\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n       \r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n        //added by ayush\r\n        selectedTitles.forEach((plant) => {\r\n          showSuccessToast(`${plant} removed successfully from the table.`);\r\n        });\r\n        await handleRemoveData( allPlants, removedTitles,droppedObjectData.initialDraggedData?.data?.items[0].objectId,type);\r\n      } else {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n      }\r\n\r\n      \r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    \r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n    // Fetch ErrorObject and Finalmessage from handleAddData\r\n    const { ErrorObject, Finalmessage } = await handleAddData(\r\n      data,\r\n      allPlants,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      type,\r\n      proposedChanges,\r\n      productChildren\r\n    );\r\n    console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n    console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n    // Check if any of the selected plants are in the ErrorObject\r\n    const erroredPlants = ErrorObject.map((item) =>\r\n      allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n    );\r\n    console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n    // Separate valid and invalid plants based on the ErrorObject\r\n    const validPlants = data.filter(\r\n      (plant) => !erroredPlants.includes(plant.title)\r\n    );\r\n    const invalidPlants = data.filter((plant) =>\r\n      erroredPlants.includes(plant.title)\r\n    );\r\n    console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n    console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n    // Show an alert only for the invalid plants that were selected\r\n    if (invalidPlants.length > 0) {\r\n      //show final message in toast\r\n      if (Finalmessage) {\r\n        showErrorToastWithProgress(Finalmessage, {\r\n          // autoClose: false, // Prevent auto-closing\r\n          // closeOnClick: false, // Prevent closing on click\r\n        });\r\n      }\r\n    \r\n      console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n    }\r\n\r\n    // Update the unique plants list to include invalid plants (keep them in the popup)\r\n    setUniqueData((prevUniqueData) => [\r\n      ...prevUniqueData,\r\n      ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n    ]);\r\n\r\n    // Add valid plants to the table\r\n    if (validPlants.length > 0) {\r\n      setTableData((prev) => [\r\n        ...validPlants.map(({ title, ...rest }) => ({ Plant: title, ...rest })),\r\n        ...prev,\r\n      ]);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n      validPlants.forEach((plant) => {\r\n        showSuccessToast(`${plant.title} added successfully to the table.`);\r\n      });\r\n    }\r\n  }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n \r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n\r\n    // Re-enable the file input\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  \r\n  return (\r\n    <>\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Button\r\n              variant=\"outline-primary\"\r\n              onClick={() => {\r\n                const link = document.createElement(\"a\");\r\n                link.href =\r\n                  \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                link.click();\r\n              }}\r\n            >\r\n              Download Template\r\n            </Button>\r\n\r\n            <Form.Group controlId=\"formFileMultiple\">\r\n              <Form.Control\r\n                type=\"file\"\r\n                multiple\r\n                onChange={handleFileInputChange}\r\n                disabled={isFileInputDisabled}\r\n                ref={fileInputRef} // Attach the ref to the file input\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"outline-danger\" onClick={handleReset}>\r\n              <FontAwesomeIcon icon={faRotateLeft} />\r\n            </Button>\r\n\r\n            <div\r\n              style={{\r\n                display: \"inline-block\",\r\n                cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n              }}\r\n            >\r\n              <Button\r\n                variant=\"outline-primary\"\r\n                onClick={handleSubmit}\r\n                disabled={isCreateButtonDisabled} // Disable the button\r\n              >\r\n                Create Manufacturing CA\r\n              </Button>\r\n            </div>\r\n\r\n            {/* <Button variant=\"outline-primary\" onClick={handleReset}>\r\n              Reset\r\n            </Button> */}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                />\r\n                <ReusableTable\r\n                \r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    // const response = await fetchData(\"POST\", SaveURL, payload);\r\n    const response = true;\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n \r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n \r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        ItemPlants: item.Plant\r\n          .map((plant) => {\r\n            const originalItem = CAItemDetails.find((ci) => ci.ItemId === item.ItemId);\r\n            const wasInOriginal = originalItem?.ItemPlants?.some(\r\n              (p) => p.PlantID === plant.PlantID\r\n            );\r\n \r\n            const isMarkedNew = plant.color === \"green\";\r\n            const isMarkedRemove = plant.color === \"red\";\r\n \r\n            // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n            if (wasInOriginal && isMarkedRemove) {\r\n              return {\r\n                PlantName: plant.PlantName,\r\n                PlantID: plant.PlantID,\r\n                PlantType: \"Remove\",\r\n              };\r\n            }\r\n \r\n            // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n            if (wasInOriginal && !isMarkedRemove) {\r\n              return {\r\n                PlantName: plant.PlantName,\r\n                PlantID: plant.PlantID,\r\n                PlantType: \"\", // or just omit this field if preferred\r\n              };\r\n            }\r\n \r\n            // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n            if (!wasInOriginal && isMarkedRemove) {\r\n              return null;\r\n            }\r\n \r\n            // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n            if (!wasInOriginal && isMarkedNew) {\r\n              return {\r\n                PlantName: plant.PlantName,\r\n                PlantID: plant.PlantID,\r\n                PlantType: \"New\",\r\n              };\r\n            }\r\n \r\n            return null; // fallback\r\n          })\r\n          .filter(Boolean), // remove null entries (i.e. case 3)\r\n \r\n      };\r\n    }),\r\n  };\r\n \r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n \r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n \r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n\r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n\r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n\r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n\r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n\r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n\r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n\r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n      declassifyUrl,\r\n      classifybody,\r\n      \"POST\"\r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n\r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n\r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n\r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n\r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n\r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n\r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n\r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n\r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n\r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n\r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n\r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n\r\n    console.log(\"Classify API Body:\", classifybody);\r\n\r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n\r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const fetchData = async (\r\n      url,\r\n      body = null,\r\n      method = \"GET\"\r\n      // headers = {}\r\n    ) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Method is:\");\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      try {\r\n        const response = await axios({\r\n          url,\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: body, // Include body only if provided\r\n        });\r\n\r\n        console.log(\"Response received:\", response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error(\"Request failed:\", error);\r\n        throw error; // Propagate the error to the caller\r\n      }\r\n    };\r\n\r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n\r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n\r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n\r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n\r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n\r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n\r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n\r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n\r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n\r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(patchUrl, updateBody, \"PATCH\");\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n\r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        declassifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n\r\n    console.log(\"All classification API calls completed successfully.\");\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};\r\n"],"names":["_ref","variant","message","show","className","_jsx","Alert","children","onHide","title","footerButtons","_jsxs","Modal","size","centered","Header","closeButton","Title","Body","Footer","map","btn","index","Button","onClick","label","errors","processedErrors","useMemo","errorGroups","reduce","groups","error","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","style","parent","CellMeasurer","columnIndex","rowIndex","width","column","i","err","ReusableAlert","_Fragment","length","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","console","log","CustomModal","ErrorPopup","forwardRef","ref","data","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","item","original","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","id","cell","row","type","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","getRowModel","forEach","toggleSelected","maxHeight","backgroundColor","flexRender","getVisibleCells","columnDef","getContext","accessorKey","WidgetLifecycle","handleDrop","usePlantDropableArea","showSuccessToast","showErrorToast","loading","setLoading","window","widget","trace","addEvent","async","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","warn","removeItem","latestDraggedData","store","getState","droppedObject","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","plant","marginRight","display","alignItems","color","fontWeight","PlantName","PlantERPStatus","AiOutlineClose","cursor","marginLeft","PlantID","getTableData","tableData","CAData","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Change","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","uniqueColumns","header","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","isMFGCA","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","_availablePlantRef$cu","current","AvailablePlant","newItems","DragAndDropComponent","performSearch","useInterComSearch","Image","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","objectId","objectType","callManufacturingCAApi","response","url","body","arguments","undefined","method","JSON","stringify","axios","headers","fetchData","processManufacturingCA","validatedData","showSuccessToastWithProgress","showErrorToastWithProgress","csrfTokenHeaders","fetchCsrfToken","CAHeaders","_objectSpread","credentials","getValue","credentialsParts","companyName","collabSpace","allPlantsData","getAllPlants","manufacturingCABody","excelData","uniquePlantTitles","Set","itemName","toString","trim","plantsList","p","name","add","parentPlants","plantTitle","matchedPlant","find","replace","CATitle","CAOrganization","CACollabSpace","CAOwner","Items","ParentPlants","createManufacturingCABody","concat","PlantAssignment","useToastWithProgress","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","initializeDroppableArea","tableKey","setTableKey","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","isFileInputDisabled","setIsFileInputDisabled","isCreateButtonDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","setIsRemoveMode","handlePlantAssignment","usePlantAssignment","dispatch","useDispatch","securityContext1","fileInputRef","useCallback","plantId","extractPlantData","plantData","plantName","selectedTableRows","useSelector","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAheaders","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","isDropped","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","getUniquePlant","sourceData","assignedTablePlants","flatMap","_item$Plant","uniqueTablePlants","filter","updateTableData","updatedData","prevKey","cardData","_droppedObjectData$in7","_droppedObjectData$in8","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in9","_droppedObjectData$in10","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find2","finalObj","classid","classitem","test","MBOMName","MBOMValue","Type","initialClass","_allPlants$find3","classObject","rowstoDelete","_allPlants$find4","classItem","result","saveData","success","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","userSelect","position","paddingRight","handleCopy","textToCopy","navigator","clipboard","writeText","right","top","background","border","fontSize","FaRegCopy","formattedFinalMessage","autoClose","finalobj","ErrorObj","keys","errorObj","processErrorObj","MSG_SAVE_FAILURE","newTableData","uniqueTableData","getUniqueTableData","owner","Owner","Description","imageURL","EIN","getCardData","tableColumns","flexDirection","justifyContent","padding","bottom","left","transform","zIndex","gap","link","document","createElement","href","download","click","Form","Group","controlId","Control","multiple","event","files","target","validExtensions","Array","from","file","toLowerCase","endsWith","value","reader","FileReader","onload","Uint8Array","e","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","normalizedHeaders","errorDescription","formattedErrors","onerror","readAsArrayBuffer","handleFileChange","finally","disabled","handleReset","FontAwesomeIcon","icon","faRotateLeft","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setPlantObjectData","setCAItemDetails","CardWithDragAndDrop","widgetType","PlantAssignmentToolbarNativeCta","prev","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","existsInRedux","_droppedObjectData$in5","_droppedObjectData$in6","ErrorObject","handleAddData","erroredPlants","_allPlants$find","ClassID","validPlants","invalidPlants","prevUniqueData","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","ItemType","ItemState","getSaveDataForCA","_droppedObjectData$in","_droppedObjectData$in2","droppedItems","_droppedObjectData$in3","_droppedObjectData$in4","selectedTitles","removedTitles","prevUniquePlants","handleRemoveData","ReusableTable","ContentErrorsModal","_droppedObjectData$in11","_droppedObjectData$in12","_droppedObjectData$in13","objectData","payload","CAId","organization","caDetails","ca","_excluded2","PlantType","_droppedObjectData$in14","_droppedObjectData$in15","_droppedObjectData$in16","ItemMBOM","_originalItem$ItemPla","ci","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","querySelector","getElementById","appendChild","ReactDOM","render","Provider","ToastContainer","start","injectedScript","textContent","injectRefreshListener","extractIdsFromTitles","newClasses","itemTitle","productId","declassifyUrl","classifybody","classes","declassifyResponse","productChilds","NotPropagableChilds","prodChild","change","identifier","action","classId","missingIn","child","Childs","classTitle","filteredNewClasses","classifyUrl","classifyResponse","initialAssignedClasses","AllClasses","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchOOTBData","Promise","resolve","reject","authenticatedRequest","onComplete","onFailure","prodchilds","notPropagableChild","childId","childName","childs","isArray","every","childTitles","errorItem","updateBody","propagateClasses","_response$member$","nextApiUrl","cestamp","member","patchUrl","childclassifyResponse"],"sourceRoot":""}